#!/usr/bin/python

import rospy
from sensor_msgs.msg import Joy
from std_msgs.msg import Bool
from geometry_msgs.msg import PointStamped
from geometry_msgs.msg import PoseStamped
from recovery_supervisor_msgs.msg import GoalDemo
from recovery_supervisor_msgs.msg import GoalFeature
from nav_msgs.msg import Path

class FakeDemoInput:

  usage_str = """
  button 4: publish demo\n
  button 5: input new feature vectors\n
  button 6: start new demo path
  button 7: start new odom path
  """

  showing_demo_path_ = False
  latest_path_ = Path()
  demo_msg_ = GoalDemo()

  def __init__(self):
    rospy.init_node("fake_demo_input")
    joy_sub = rospy.Subscriber("joy", Joy, self.joyCallack)
    path_sub = rospy.Subscriber("points_to_path/path", Path, self.pathCallback)

    self.demo_status_pub_ = rospy.Publisher("recovery_supervisor/demonstration_status", Bool, queue_size=10)
    self.demo_pub_ = rospy.Publisher("demo", GoalDemo, queue_size=10)

    self.printUsage()

    r = rospy.Rate(1)
    while (not rospy.is_shutdown()):
        r.sleep()

  def printUsage(self):
    rospy.loginfo(self.usage_str)

  def pathCallback(self, msg):
    self.latest_path_ = msg

  def joyCallack(self, msg):
    if len(msg.buttons) < 8:
      rospy.logerr("Not enough buttons. I need buttons 6 & 7")
      return

    print msg.buttons

    if msg.buttons[4]: # publish the demo msg!
      self.demo_pub_.publish(self.demo_msg_)

    if msg.buttons[5]: # input new feature vectors one at a time
      # clear nany old data
      self.demo_msg_.feature_values = []

      print "Waiting for input..."

      try:
        feat = GoalFeature()
        feat.goal = int(raw_input())
        self.demo_msg_.feature_values.append(feat)
      except ValueError:
        rospy.loginfo("You must enter one integer")

    if msg.buttons[6]: # start of a new demo path
      self.showing_demo_path_ = True
      self.demo_status_pub_.publish(Bool(True))
      rospy.loginfo("Starting new demo path")

    elif msg.buttons[7]: # start of a odom path
      self.showing_demo_path_ = False
      self.demo_status_pub_.publish(Bool(True))
      rospy.loginfo("Starting new odom path")

    elif msg.buttons[8]:
      # end of a demo/odom path
      self.demo_status_pub_.publish(Bool(False))
      rospy.loginfo("Ending path")
      if (self.showing_demo_path_):
        self.demo_msg_.demo_path = self.latest_path_
      else:
        self.demo_msg_.odom_path = self.latest_path_

if __name__ == "__main__":
  fdi = FakeDemoInput()


